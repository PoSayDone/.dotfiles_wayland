# Basic Settings

set shell zsh
set shellopts '-euy'
set ifs "\n"
set ignorecase true
set icons

#FZF
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

# Custom Functions
cmd open ${{
    case "$f" in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
            mntdir="$f-archivemount"
            [ ! -d "$mntdir" ] && {
                mkdir "$mntdir"
                archivemount "$f" "$mntdir"
                echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
            }
            lf -remote "send $id cd \"$mntdir\""
            lf -remote "send $id reload"
            ;;
        *)
            for f in $fx; do
                $OPENER $f > /dev/null 2> /dev/null &
            done;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd dragon %dragon-drop -a $fx

cmd setwallpaper %cp "$f" ~/.config/wall.jpg && xwallpaper --zoom "$f"

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.xz) tar -xf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.rar) unrar x "$f" ;;
      *.rar) unrar x "$f" ;;
      *.7z) 7z x "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Execute exe
cmd execute ${{
	wine "$f"
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d

map c $nvim "$f"

map au unarchive
map ae execute

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map R reload
map mf mkfile
map md mkdir
map mv dragon
map bg setwallpaper
map C clear

map dd trash
map dr restore_trash

# Movement
map gd cd ~/Documents
map gD cd ~/Downloads
map gp cd ~/Pictures
map gc cd ~/.config
map gs cd ~/.local/share
map gi cd '~/Documents/C#/GitRepos/'

#FZF
map <c-f> :fzf_jump
map f $vi $(fzf)

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id
